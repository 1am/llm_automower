"""Simple program for gettg forecast and setting schedule for Automower.
Forecast comes from ChatGPT, schedule is also generated by it using
the forecast data.
"""
from datetime import datetime, timedelta
from enum import Enum
import json
import sys

import asyncio
from dotenv import load_dotenv

import llm_wrapper
import mower_wrapper
import parse_args

load_dotenv()

class AppError(Enum):
    """Application error codes"""
    OK = 0
    NO_FORECAST = 1
    NO_SCHEDULE = 2


async def main():
    """Main program function"""
    args = parse_args.parse_args()


    mw = mower_wrapper.MowerWrapper(args.automower_api_key, args.automower_api_secret)
    print('Connecting to Automower API')
    status, mower_id = await mw.connect()
    print(f'Selected {status.system.name} {mower_id}. Battery {status.battery.battery_percent}%')
    llm = llm_wrapper.LLMWrapper()
    lat = args.lat
    lon = args.lon
    today = (datetime.now() + timedelta(days=0))

    print(f"Getting forecast for {lat}, {lon} on {today}")
    forecast = await llm.get_forecast(lat, lon, today)
    if len(forecast.forecast) == 0:
        return AppError.NO_FORECAST

    print('Calculating schedule for forecast')
    schedule = await llm.create_schedule(forecast)
    if schedule is None or len(schedule) == 0:
        return AppError.NO_SCHEDULE

    mower_tasks = []
    day_minutes = 24 * 60
    if len(schedule) == 0:
        schedule.append(llm_wrapper.MowerSchedule(start=0, duration=0, reason="No schedule"))

    for s in schedule:
        entry = {
            "start": s.start,
            "duration": s.duration,
            "monday": True,
            "tuesday": True,
            "wednesday": True,
            "thursday": True,
            "friday": True,
            "saturday": True,
            "sunday": True
        }
        if s.start + s.duration < day_minutes:
            mower_tasks.append(entry)

    print(f'Setting schedule: {mower_tasks}')
    await mw.set_calendar(mower_tasks)

    save_data_json = json.dumps({
        'forecast': forecast,
        'schedule' : schedule,
        'tasks': mower_tasks
    }, cls=llm_wrapper.MowerDataEncoder)

    if args.output_file:
        with open(args.output_file, 'w', encoding='utf-8') as f:
            f.write(save_data_json)
    return AppError.OK

if __name__ == '__main__':
    ret = asyncio.run(main())
    if ret != AppError.OK:
        sys.exit(ret)
